// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Member {
  id           BigInt     @id @default(autoincrement()) @db.BigInt
  providerId  String     @unique @db.VarChar(191) @map("provider_id")
  createdAt   DateTime   @default(now()) @map("created_at")
  socialType  String     @db.VarChar(191) @map("social_type")
  users GroupToUser[]
  members Participant[]
  mogacos Mogaco[]
  
  @@map("Member")
}

model Mogaco {
  id               BigInt     @id @default(autoincrement()) @db.BigInt
  groupId         BigInt     @db.BigInt @map("group_id")
  memberId         BigInt     @db.BigInt @map("member_id")
  title            String     @db.VarChar(191)
  contents         String     @db.VarChar(191)
  date             DateTime   @db.DateTime
  maxHumanCount  Int        @default(1) @db.TinyInt @map("max_human_count")
  address          String     @db.VarChar(191)
  status           String     @db.VarChar(191)
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime?   @updatedAt() @map("updated_at")
  deletedAt       DateTime?   @db.DateTime @map("deleted_at")
  mogacos Participant[]
  
  @@map("Mogaco")

  member Member @relation(fields: [memberId], references: [id])
}

model Group {
  id     BigInt  @id @default(autoincrement()) @db.BigInt
  title  String  @db.VarChar(191)
  groups GroupToUser[]
  
  @@map("Group")
}

model GroupToUser {
  groupId BigInt  @db.BigInt @map("group_id")
  userId  BigInt  @db.BigInt @map("user_id")

  @@id([groupId, userId])
  @@map("GroupToUser")

  group Group @relation(fields: [groupId], references: [id])
  user  Member @relation(fields: [userId], references: [id])
}

model Participant {
  postId BigInt  @db.BigInt @map("post_id")
  userId  BigInt  @db.BigInt @map("user_id")

  @@id([postId, userId])
  @@map("Participant")

  mogaco Mogaco @relation(fields: [postId], references: [id])
  member Member @relation(fields: [userId], references: [id])
}